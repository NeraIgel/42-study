[philosophers]
-. 개요 정리
	a. mandatory
		a-a. 식사하는 철학자 문제를 쓰레드와 뮤텍스를 사용하여 풀어본다.
		a-b. 두 철학자 사이에 한 개의 포크가 존재하므로, 철학자가 여러 명일 경우 각 철학자의 왼쪽과 오른쪽에 포크가 하나씩 존재한다.
	b. bonus
		b-a. 식사하는 철학자 문제를 프로세스와 세마포어를 사용하여 풀어본다.
		b-b. 모든 포크는 테이블 가운데에 있으며, 사용 가능한 포크의 개수가 세마포어로 표현된다. 또한, 각 철학자는 프로세스로 이루어져야 하나 메인 프로세스는 철학자가 아니다.

	* 식사하는 철학자 문제
		a. 철학자들은 원탁에 모여 있다.
		b. 철학자들은 3가지 행동 중 하나를 취한다. (먹기 -> 잠자기 -> 생각하기)
		c. 철학자들의 원탁 가운데에는 스파게티 그릇이 놓여 있으며, 철학자 수만큼 포크가 놓여있다.
		d. 철학자들은 일정 시간 동안 밥을 먹지 못하면 죽게 되고, 밥을 먹기 위해서는 2개의 포크를 사용하여야 한다.
		e. 철학자들은 정해진 수명이 다하게 되면 죽게 되고, 철학자 한 명이라도 사망하게 되면 프로그램을 종료시켜야 한다.

	* 식사하는 철학자 문제에서의 발생 가능한 교착 상태
		a. 만약 모든 철학자들이 동시에 자신의 왼쪽 포크를 잡는다면, 모든 철학자들이 자신의 오른쪽 포크가 사용 가능해질 때까지 기다린다.
		b. 이 경우, 모든 철학자들이 오른쪽 포크를 기다리게 되므로, 계속 기다리는 상태가 지속되어져서 교착(Deadlock) 상태에 빠지게 된다.

	* 식사하는 철학자 문제에서의 교착 상태 확률 감소를 위한 방안
		a. 철학자들의 최초 식사 시작 시간을 최대한 비슷하게 맞춘다.
		b. 철학자들은 2개의 포크를 모두 집을 수 있을 때에만 식사를 시작한다.
		c. 홀수 번째 철학자들과 짝수 번째 철학자들이 먼저 집는 포크의 방향을 다르게 한다.
		d. 홀수 번째 철학자들과 짝수 번째 철학자들의 행동 시간들 사이에 일정 term을 주어서 겹치는 횟수를 줄여본다.

-. 검증 방법 정리
	a. subject
	b. https://github.com/newlinuxbot/Philosphers-42Project-Tester

-. 자료 조사
	a. https://80000coding.oopy.io/76b29f61-bc9e-446b-92a6-e0c3eb795a32
	b. https://80000coding.oopy.io/001f6884-1ca9-4386-a7d9-0e4a35116cea#adffd23a-ea6c-4f21-88a5-ecfb0536961d
	c. https://velog.io/@hidaehyunlee/Philosophers-Dining-philosophers-problem-%EC%86%8C%EA%B0%9C
	d. https://velog.io/@meong9090/Philosophers-Philosophers%EA%B3%BC%EC%A0%9C-%EC%B4%9D-%EC%A0%95%EB%A6%AC
	e. https://velog.io/@jwoo/Philosophers-%ED%97%88%EC%9A%A9%ED%95%A8%EC%88%98
	f. https://github.com/JaeSeoKim/philosophers

-. 실행 방법 정의
	a. ./philo(_bonus) (a)number_of_philosophers (b)time_to_die (c)time_to_eat (d)time_to_sleep [(e)number_of_times_each_philosopher_must_eat]

	* 매개변수 설명
		a. 철학자의 수 (number_of_philosophers) : 테이블에 앉아 있는 철학자의 수와 포크의 수
		b. 철학자의 수명 (time_to_die) : 밀리초 단위로, 철학자가 이 시간이 지나도록 밥을 못 먹으면 해당 철학자는 사망한다.
		c. 밥을 먹는 시간 (time_to_eat) : 밀리초 단위로, 철학자가 밥을 먹는 시간
		d. 잠자는 시간 (time_to_sleep) : 밀리초 단위로, 철학자가 잠자는 시간
		e. 각 철학자가 최소한 밥을 먹어야 하는 횟수 (number_of_times_each_philosopher_must_eat) : 선택 인자로써, 모든 철학자가 이 횟수만큼 밥을 먹게 되면 프로그램을 종료시킨다.

-. 단위기능 목록 정의
	a. main
		a-a. 모든 철학자들을 생성시킨다.
		a-b. 모든 철학자들이 생성되었으면, 각 철학자들이 시뮬레이션 가능하게끔 만든다. (공유 자원 : 시뮬레이션 상태)
		a-c. 모든 철학자들이 최소 밥 먹는 횟수에 도달하였으면, 시뮬레이션을 종료한다. (공유 자원 : 밥 먹은 횟수)
		a-d. mandatory 기준, 각 철학자들의 마지막 밥 먹은 시작 시간을 확인하고, 공복 상태가 오래되었으면 해당 철학자를 죽게 만들고 시뮬레이션을 종료한다. (공유 자원 : 필로 상태)
	b. philosopher
		b-a. 생성 직후, 로깅을 남긴다. (공유 자원 : 출력 터미널)
		b-b. 생성 직후, 시뮬레이션 시작 신호를 기다린다. 시작되면, 우선 생각하게끔 만든다. (공유 자원 : 시뮬레이션 상태, 필로 상태)
		b-c. 상태 전이가 가능하다면, 주어진 시간만큼 포크 2개를 사용하여 밥을 먹는다. 단, 최소 밥 먹는 횟수에 도달한 이후에는 로깅을 남기지는 않는다. (공유 자원 : 시뮬레이션 상태, 출력 터미널, 필로 상태, 포크, 밥 먹은 횟수)
		b-d. 상태 전이가 가능하다면, 주어진 시간만큼 잠을 잔다. (공유 자원 : 시뮬레이션 상태, 출력 터미널, 필로 상태)
		b-e. 상태 전이가 가능하다면, 잠시 생각한다. (공유 자원 : 시뮬레이션 상태, 출력 터미널, 필로 상태)
			* 3개의 상태 전이 시마다, 공복 시간을 확인하고 공복 상태가 오래되었으면 해당 철학자를 죽게 만들고 시뮬레이션을 종료한다.

	* 철학자 상태 정의
		a. none : 생성 직후
		b. thinking : 이전 상태가 sleeping이거나, 시뮬레이션 시작 신호를 받은 경우
		c. eating : 이전 상태가 thinking이고, 포크 2개를 사용할 수 있는 경우
		d. sleeping : 이전 상태가 eating인 경우
		e. died : 수명이 다했거나, 공복 상태가 오래된 경우

-. 디렉토리 구조 정의
	— Makefile
	— include
	— src
		|- core
		|- monitor
		|- philo
		|- utils

-. 시퀀스 플로우 정의
	a. 셋업
		a-a. 매개 변수 검사
		a-b. 모든 철학자 생성
		a-c. 모든 철학자 시뮬레이션 시작
	b. 루틴
		b-a. main
			b-a-a. 시뮬레이션 상태 체크
			b-a-b. 모든 철학자 식사 횟수 체크
				* mandatory 기준, 각 철학자 공복 시간 체크
		b-b. philosopher
			b-b-a. 식사
			b-b-b. 잠자기
			b-b-c. 생각하기
				* 상태 전이 시마다, 공복 시간 체크
	c. 정리
		c-a. 쓰레드 자원
		c-b. 동기화 자원

-. 학습 참고 사이트
	a. https://m.blog.naver.com/ya3344/221239312169
	b. https://kuboy.tistory.com/11
	c. https://luji.tistory.com/37
	d. https://blackinkgj.github.io/semaphore/
	e. https://yechoi.tistory.com/55
