[miniRT]
-. 개요 정리
	a. Ray tracing 방식을 사용하여 이미지를 렌더링한다.
	b. miniLibX를 활용하여 렌더링한 이미지를 화면에 출력한다.

	* Ray tracing
		: 1980년 Turner Whitted가 논문에서 발표한 기법으로 이미지의 픽셀 하나하나를 통과하는 광선들이 있다 가정하고 그 광선(Ray)을 역추적(Trace)하는 방식이다.
		  가상적인 광선이 물체의 표면에 반사되어, 카메라를 거쳐 돌아오는 경로를 계산한다. 많게는 물체를 구성하는 입자 하나하나의 빛을 전부 계산해야 되기 때문에 렌더링을 하는 데 있어 시간이 많이 소요되는 기술이다.
		  따라서, 실시간 렌더링이 필요하지 않는 프리 렌더링 영상(영화, 광고, 드라마 등에서 쓰이는 GCI 등)에서는 오래 전부터 쓰였으나 실시간 렌더링이 필요한 비디오 게임과 같은 분야에서는 아직 상용화된 기술이 아니다.

-. 실행 방법 정의
	a. ./miniRT *.rt

	* 장면 설명 파일
		a. 확장자는 .rt 이어야 한다.
		b. 각 요소들은 하나 이상의 줄 바꿈으로 구분할 수 있다.
		c. 각 요소들의 각 정보 유형은 하나 이상의 공백으로 구분할 수 있다.
		d. 각 요소들의 첫 번째 정보 유형은 유형 식별자이고, 각 요소마다 각기 다른 정보들이 기술되어 있다.
		e. 대문자로 정의된 요소는 장면에서 한 번만 선언할 수 있다.

	* 장면 요소
		a. 전역 요소
			a-a. 주변광 [A] : 주변광 비율, RGB 색상 범위
			a-b. 카메라 [C] : 시점의 xyz 좌표, 3D로 정규화된 방향 벡터, 수평 시야각
			a-c. 조명 [L] : 광점의 xyz 좌표, 밝기 비율, RGB 색상 범위(only bonus)
		b. 기하학적 개체 요소
			b-a. 구 [sp] : 구 중심의 xyz 좌표, 구의 지름, RGB 색상 범위
			b-b. 평면 [pl] : xyz 좌표, 3D로 정규화된 방향 벡터, RGB 색상 범위
			b-c. 원기둥 [cy] : xyz 좌표, 3D로 정규화된 방향 벡터, 원기둥 직경, 원기둥 높이, RGB 색상 범위

-. 기반 기술 정리
	a. miniLibX
		a-a. https://harm-smits.github.io/42docs/libs/minilibx
	b. Raytracing
		b-a. https://raytracing.github.io/
		b-b. https://www.scratchapixel.com/
		b-c. https://learnopengl.com/Lighting/Basic-Lighting
		b-d. https://www.khanacademy.org/computing/pixar/rendering/rendering1/v/rendering-1

-. 검증 방법 정리
	a. https://github.com/GlaceCoding/project42_minirt_tester/
	b. https://80000coding.oopy.io/02410306-d341-4961-a2c2-590370b9a043#02410306-d341-4961-a2c2-590370b9a043

-. 자료 조사
	a. https://github.com/GaepoMorningEagles/mini_raytracing_in_c
	b. https://80000coding.oopy.io/f163b289-a5cd-4ad0-a953-eabc01903300

	* Polymorphism in C(다형성)
		a. https://stackoverflow.com/questions/8194250/polymorphism-in-c
		b. https://elvanov.com/2546

-. 개발 환경 정의
	a. minilibx_mms_20210621.tgz

-. 단위기능 목록 정의
	a. mandatory
		a-a. 윈도우 동작이 원활하게 되어야 한다. (전환, 종료, 최소화, ESC Key)
		a-b. 기하학적 개체, 카메라, 조명에 크기변환 및 회전변환을 적용할 수 있어야 한다.
		a-c. 기하학적 개체의 고유한 속성(구의 경우 지름, 원기둥의 경우 너비 및 높이)의 크기를 조절할 수 있어야 한다.
		a-d. 조명은 스폿 밝기, 짙은 그림자, 앰비언스 조명(물체가 완전히 어둠 속에 있지 않음), 주변광 및 확산 조명을 구현해야 한다.
	b. bonus
		b-a. 정반사를 추가해본다.
		b-b. 색상 파괴 효과를 사용해본다.
		b-c. 색상을 가지는 다중 스폿 조명을 사용해본다.
		b-d. 다른 기하학적 개체 요소를 추가해본다. (원뿔, 쌍곡면, 포물면, 등등..)
		b-e. 범프 맵 텍스처를 처리한다.

-. 디렉토리 구조 정의
	— Makefile
	— include
	— libft
	— libmlx
	— src
		|- core
		|- deque
		|- minirt
		|- graphic
		|- object
		|- ray
		|- scene
		|- vector
		|- utils

-. 학습 내용
	a. 렌더링(Rendering)
		-. 렌더링 작업은 캔버스 역할을 하는 이미지 평면의 각 픽셀에 색상을 입히는 과정이라고 볼 수 있다.
		-. 렌더링을 위해서는 방향성을 가지는 가상의 카메라와 캔버스 역할을 수행하는 이미지 평면이 필요하다.
		-. 렌더링 알고리즘은 여러 가지가 있으며, 그 중 다재다능한 레이 트레이싱 알고리즘은 실사 이미지 렌더링에 적합하다.

	b. 레이 트레이싱(Ray tracing)
		-. 레이 트레이싱 알고리즘은 이미지 평면의 각 픽셀에 대하여 아래 3단계를 실행하며, 모든 픽셀에 대해서 반복 실행한다.
		-. 레이 트레이싱 알고리즘
			1) 광선 추적기는 카메라에서 출발하여, 이미지 평면의 픽셀을 통과하고, 화면을 향해 뻗는 수학적인 광선을 만들어낸다.
			2) 광선 추적기는 화면 상의 물체와 광선 사이에서 가장 가까운 교점을 계산한다.
			3) 광선 추적기는 교점의 색상을 결정하고, 그 색상으로 이미지 평면을 색칠한다.

		b-c. 색상을 결정하는 방법
			-. 광선의 반대 방향인 카메라를 향해 되돌아오는 빛[색상]을 확인하기 위해서는 3가지 요소들을 고려하여야 한다.
			-. 카메라를 향해 되돌아오는 빛[색상]에 영향을 주는 요소
				1) 표면의 점을 향한 빛의 세기 (Incoming light)
					1-1) 광원과의 거리 (Spotlight distance)
						: 광원이 표면과 가까울수록 표면의 점들이 밝게 빛난다.
					1-2) 광원의 밝기 (Spotlight intensity)
						: 광원 자체가 밝으면 표면의 점들이 보다 밝게 빛난다.
					1-3) 표면의 방향
						: 광원으로부터 나오는 빛이 반사되는데, 그 반사되는 방향이 광원과 수직인 점들은 보다 밝고 스쳐지나가듯이 지나가는 점들은 보다 흐리다.
							* 이 때, 법선을 계산함으로써 해당 점들의 표면 방향을 파악하는 것으로 추정한다.
				2) 표면상의 물체가 빛을 반사하는 방식 (Reflection)
					2-1) 난반사 (Diffuse reflection)
						: 난반사가 적으면 표면이 흐릿하게 표현되고, 많으면 표면이 거칠게 표현된다.
					2-2) 정반사 (Specular reflection)
						: 정반사가 많을수록 해당하는 표면의 점이 보다 밝게 빛나기 때문에 하이트라트 효과가 나온다.
				3) 카메라 위치 (Camera position)

	c. 그림자 광선 (Shadow ray)
		-. 레이 트레이싱에서는 기본 이미지가 렌더링되는 동안 음영 처리를 할 수 있다.
		-. 레이 트레이싱에서는 기본 광선만을 추적하면, 물체의 음영 효과를 표현할 수 없고 추가적인 작업이 필요하다.
		-. 레이 트레이싱에서는 일차적으로 기본 광선을 추적하고, 그 이후 표면의 점에서 시작하여 광원 방향으로 나아가는 그림자 광선(Shadow ray)을 추적함으로써 음영 효과를 표현할 수 있다.
		-. 그림자 광선을 추적할 때 고려해야 하는 요소는 아래 2가지이다.
			1) 조명의 종류
				1-1) 직접 조명 (Direct illumination)
				1-2) 간접 조명 (Indirect illumination)
			2) 투사율
				2-1) 반사 (Reflected ray)
				2-2) 굴절 (Refracted ray)

	d. 컴퓨터 그래픽스를 위한 선형 대수학
		d-a. 선형 대수학
			-. 선형 대수학은 벡터 연구와 관련된 수학의 한 분야이다.
			-. 벡터는 숫자 배열로 나타낼 수 있으며, 이 숫자 배열은 수학에서 튜플이라고 부른다. 그리고, 튜플의 요소들은 실수이다.
			-. 컴퓨터 그래픽스에서 벡터는 공간의 위치나 방향을 나타내는데 사용할 수 있으며, 벡터의 내용을 변환하는 것을 선형 변환이라고 부른다.
		d-b. 점과 벡터
			-. 점은 3차원 공간에서의 위치를 의미한다.
			-. 벡터는 3차원 공간에서의 방향 및 크기를 의미한다.
		d-c. 선형 변환
			-. 선형 변환에는 이동(translation)과 회전(rotation) 동작이 있다.
			-. 이동(translation)은 점에 대하여는 의미를 가지지만, 벡터에 대하여는 의미를 가지지 않는다. 점에 대한 이동은 단순히 공간에서 포인트를 이동하게끔 만든다.
			-. 회전(rotation)은 벡터에 대하여 의미를 가지는 동작이다. 벡터의 방향을 바꾸는 동작이 이루어진다.
		d-d. 벡터의 정규화
			-. 벡터의 길이가 1일 때, 벡터가 정규화되었다고 표현한다.
			-. 벡터를 정규화시키게 되면, 벡터 길이는 1이 되도록 변경되지만 방향은 바뀌지 않는다.
			-. 대부분의 경우 정규화된 벡터를 사용하여 수식을 계산하는데, 벡터의 길이가 필요한 수식에서는 정규화시키면 안 된다.
		d-e.  법선
			-. 표면의 한 지점에서 기하학적 개체의 표면 방향을 설명하는데 사용되는 기술 용어이다.
			-. 법선은 개체의 밝기를 계산하는데 중요한 역할을 하며, 벡터와 같은 방식으로 선형 변환이 이루어지지 않는다.
